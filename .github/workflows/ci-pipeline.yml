name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and run tests
        run: ./mvnw clean verify --batch-mode -e
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports/

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run code quality checks
        run: ./mvnw spotbugs:spotbugs pmd:pmd checkstyle:checkstyle --batch-mode
      - name: Upload code quality reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            target/spotbugsXml.xml
            target/pmd.xml
            target/checkstyle-result.xml

  deploy-staging:
    needs: [ build-and-test, code-quality ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Remove Existing AWS CLI and Install Fresh
        run: |
          if command -v aws &> /dev/null; then
            echo "Existing AWS CLI found, removing it..."
            sudo rm -rf /usr/local/aws-cli /usr/local/bin/aws /usr/local/bin/aws_completer
          fi
          echo "Installing fresh AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt-get update
          sudo apt-get install -y unzip
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build and Package
        run: ./mvnw clean package -DskipTests
      - name: Deploy to Elastic Beanstalk
        run: |
          mkdir -p deploy
          cp target/core-banking-api-0.0.1-SNAPSHOT.jar deploy/
          [ -f Procfile ] && cp Procfile deploy/ || echo "web: java -jar core-banking-api-0.0.1-SNAPSHOT.jar" > deploy/Procfile
          cd deploy
          zip -r ../core-banking-api-staging.zip .
          cd ..
          aws s3 cp core-banking-api-staging.zip s3://elasticbeanstalk-us-east-1-861276105493/core-banking-api-staging.zip
          # Check if version exists, create if not
          VERSION_LABEL="v${{ github.sha }}"
          if ! aws elasticbeanstalk describe-application-versions \
            --application-name core-banking-api \
            --version-labels "$VERSION_LABEL" | grep -q "\"VersionLabel\": \"$VERSION_LABEL\""; then
            echo "Creating application version $VERSION_LABEL..."
            aws elasticbeanstalk create-application-version \
              --application-name core-banking-api \
              --version-label "$VERSION_LABEL" \
              --source-bundle S3Bucket=elasticbeanstalk-us-east-1-861276105493,S3Key=core-banking-api-staging.zip
          else
            echo "Application version $VERSION_LABEL already exists, skipping creation."
          fi
          # Check if environment exists, create if not
          if ! aws elasticbeanstalk describe-environments --environment-names staging | grep -q '"Status":'; then
            echo "Creating staging environment..."
            aws elasticbeanstalk create-environment \
              --application-name core-banking-api \
              --environment-name staging \
              --solution-stack-name "64bit Amazon Linux 2023 v4.3.2 running Corretto 17" \
              --option-settings Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=t2.micro
            # Wait for environment to be ready (up to 10 minutes)
            for i in {1..60}; do
              if aws elasticbeanstalk describe-environments --environment-names staging | grep -q '"Status": "Ready"'; then
                echo "Staging environment ready!"
                break
              fi
              echo "Waiting for staging environment... ($i/60)"
              sleep 10
            done
          fi
          # Update environment with the version
          aws elasticbeanstalk update-environment \
            --application-name core-banking-api \
            --environment-name staging \
            --version-label "$VERSION_LABEL"