name: Deploy to Staging

on:
  push:
    branches:
      - main

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Remove Existing AWS CLI and Install Fresh
        run: |
          if command -v aws &> /dev/null; then
            echo "Existing AWS CLI found, removing it..."
            sudo rm -rf /usr/local/aws-cli /usr/local/bin/aws /usr/local/bin/aws_completer
          fi
          echo "Installing fresh AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt-get update
          sudo apt-get install -y unzip
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build and Package
        run: ./mvnw clean package -DskipTests
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Deploy to Elastic Beanstalk
        run: |
          mkdir -p deploy
          cp target/core-banking-api-0.0.1-SNAPSHOT.jar deploy/
          [ -f Procfile ] && cp Procfile deploy/ || echo "web: java -jar core-banking-api-0.0.1-SNAPSHOT.jar" > deploy/Procfile
          cd deploy
          zip -r ../core-banking-api-staging.zip .
          cd ..
          aws s3 cp core-banking-api-staging.zip s3://elasticbeanstalk-us-east-1-861276105493/core-banking-api-staging.zip
          VERSION_LABEL="v${{ github.sha }}"
          if ! aws elasticbeanstalk describe-application-versions \
            --application-name core-banking-api \
            --version-labels "$VERSION_LABEL" | grep -q "\"VersionLabel\": \"$VERSION_LABEL\""; then
            echo "Creating application version $VERSION_LABEL..."
            aws elasticbeanstalk create-application-version \
              --application-name core-banking-api \
              --version-label "$VERSION_LABEL" \
              --source-bundle S3Bucket=elasticbeanstalk-us-east-1-861276105493,S3Key=core-banking-api-staging.zip
          else
            echo "Application version $VERSION_LABEL already exists, skipping creation."
          fi
          # Debug environment status
          echo "Checking staging environment status..."
          aws elasticbeanstalk describe-environments --environment-names staging > env_status.json
          cat env_status.json
          # Check if environment exists and is usable
          if ! jq -e '.Environments[] | select(.EnvironmentName == "staging" and .Status != "Terminated")' env_status.json > /dev/null 2>&1; then
            echo "Staging environment either doesn't exist or is terminated. Attempting to create..."
            # Ensure any terminated environment is fully deleted
            if jq -e '.Environments[] | select(.EnvironmentName == "staging" and .Status == "Terminated")' env_status.json > /dev/null 2>&1; then
              echo "Deleting terminated staging environment..."
              aws elasticbeanstalk terminate-environment --environment-name staging --terminate-resources
              for i in {1..30}; do
                if ! aws elasticbeanstalk describe-environments --environment-names staging | grep -q '"Status": "Terminated"'; then
                  echo "Terminated environment deleted."
                  break
                fi
                echo "Waiting for termination to complete... ($i/30)"
                sleep 10
              done
            fi
            echo "Creating staging environment..."
            aws elasticbeanstalk create-environment \
              --application-name core-banking-api \
              --environment-name staging \
              --solution-stack-name "64bit Amazon Linux 2023 v5.6.0 running Corretto 17" \
              --option-settings Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=t2.micro \
            || { echo "Failed to create environment"; cat env_status.json; exit 1; }
            for i in {1..90}; do
              STATUS=$(aws elasticbeanstalk describe-environments --environment-names staging --query 'Environments[0].Status' --output text)
              echo "Current status: $STATUS"
              if [ "$STATUS" = "Ready" ]; then
                echo "Staging environment ready!"
                break
              elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Terminated" ]; then
                echo "Environment creation failed with status: $STATUS"
                exit 1
              fi
              echo "Waiting for staging environment... ($i/90)"
              sleep 10
            done
            if [ "$STATUS" != "Ready" ]; then
              echo "Environment not ready after 15 minutes"
              exit 1
            fi
          else
            echo "Staging environment already exists and is usable."
          fi
          aws elasticbeanstalk update-environment \
            --application-name core-banking-api \
            --environment-name staging \
            --version-label "$VERSION_LABEL"